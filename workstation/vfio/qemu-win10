#!/bin/bash

set -m

RC_DRIVER_UNLOAD_FAILED=1
RC_MUST_RUN_AS_ROOT=2
RC_RUNAS_USER_NOT_DEFINED=3
RC_RUNAS_USER_NONEXISTENT=4

if [[ "$UID" -ne 0 ]]; then
    echo 'You must run this script as root.' >&2
    exit "$RC_MUST_RUN_AS_ROOT"
fi

cd "$(dirname "$0")"
# User to run the virtual machine as
runas="$SUDO_USER"
runas_user_home="$(getent passwd "$runas" | awk -F: '{ print $6 }')"
monitor_dev="/run/user/$(id -u "$runas")/qemu.monitor"
vm_net_interface=wlp6s0
vm_lvm_volume="/dev/mapper/vg--kvm-win10"
uefi_code_path="$runas_user_home/.vfio/OVMF_CODE.fd"
uefi_vars_path="$runas_user_home/.vfio/ovmf_vars_x64_win10.bin"
# A floppy image containing VirtIO disk drivers. Needed during the
# install process for Windows.
virtio_drivers="$runas_user_home/.vfio/virtio-win_amd64.vfd"
disk_iso="$runas_user_home/.vfio/en_windows_10_multiple_editions_x64_dvd_6846432.iso"

# PCI bus IDs from /sys/bus/pci/devices or `lspci -D`
vfio_gpu_device='0000:03:00.0'
vfio_gpu_audio='0000:03:00.1'
vfio_usb_device='0000:02:00.0'

if [[ -z "$runas" ]]; then
    echo 'runas user not defined.' >&2
    exit "$RC_RUNAS_USER_NOT_DEFINED"
fi

if [[ -z "$runas_user_home" ]]; then
    echo "Could not get home for runas user $runas." >&2
    exit "$RC_RUNAS_USER_NONEXISTENT"
fi

export QEMU_PA_SERVER="/run/user/$(id -u "$runas")/pulse/native"

if rmmod nvidia_drm nvidia_modeset nvidia 2>&1 | grep -q 'in use'; then
    echo 'Failed to remove NVIDIA kernel modules, is the GPU in use?' >&2
    exit "$RC_DRIVER_UNLOAD_FAILED"
fi

rmmod vfio_pci
for dev in $vfio_gpu_device $vfio_gpu_audio; do
    echo "vfio-pci" > /sys/bus/pci/devices/$dev/driver_override
done
modprobe vfio_pci

for arg in '-t' '-f' '-d' '-s' '-c' '-m' '-u' '-l' '-v' '-x'; do
    ulimit $arg unlimited
done

function configure_networking {
    if ! ip link show dev qemubr0 >/dev/null 2>&1; then
        ip link add qemubr0 type bridge
        ip link set dev qemubr0 up
        ip addr add 172.20.0.1/24 dev qemubr0
        ip route add 172.20.0.0/24 dev qemubr0 via 172.20.0.1
        sysctl net.ipv4.ip_forward=1
        sysctl net.ipv4.conf."$vm_net_interface".forwarding=1
        sysctl net.ipv4.conf.qemubr0.forwarding=1
        ip tuntap add dev win10 mode tap
        ip link set dev win10 up promisc on
        ip link set dev win10 master qemubr0
        # Use a static hardware address so Windows doesn't think it's on a new network
        # every boot.
        ip link set dev win10 address '12:c7:b3:1c:ea:34'
    fi
}

function default_boot {
    qemu-system-x86_64 \
        -S \
        -name win10 \
        -nodefaults \
        -nodefconfig \
        -no-user-config \
        -boot d \
        -runas "$runas" \
        -cpu host,kvm=off,hv_time,hv_relaxed,hv_spinlocks=0x1fff,hv_vendor_id=SuckItNvidia \
        -smp cpus=4,sockets=1,cores=4,threads=1 \
        -enable-kvm \
        -machine pc,accel=kvm,mem-merge=off \
        -m 16384 \
        -mem-path /dev/hugepages \
        -mem-prealloc \
        -realtime mlock=on \
        -rtc base=localtime,clock=host,driftfix=none \
        -no-hpet \
        -drive file=$uefi_code_path,if=pflash,format=raw,readonly=on \
        -drive file=$uefi_vars_path,if=pflash,format=raw \
        -vga none \
        -nographic \
        -serial none \
        -parallel none \
        -balloon none \
        -device vfio-pci,host=$vfio_gpu_device \
        -device vfio-pci,host=$vfio_gpu_audio \
        -device vfio-pci,host=$vfio_usb_device \
        -drive file="$vm_lvm_volume",if=none,format=raw,cache=none,id=disk0 \
        -object iothread,id=iothread0 \
        -device virtio-blk-pci,scsi=off,drive=disk0,id=virtio-disk0,bootindex=1,iothread=iothread0 \
        \
        -device ahci,id=ahci \
        -drive file="$disk_iso",if=none,format=raw,cache=none,id=cdrom,readonly=on \
        -device ide-cd,bus=ahci.1,drive=cdrom,id=sata-cdrom \
        \
        -net nic,model=virtio \
        -net tap,ifname=win10,script=no,downscript=no \
        \
        -device intel-hda \
        -device hda-duplex \
        \
        -qmp unix:"$monitor_dev",server,nowait &
}

function wait_for_monitor {
    tries=0
    max_tries=10
    while [[ ( ! -S "$monitor_dev" ) || "$tries" -gt "$max_tries" ]]; do
        tries="$(($tries + 1))"
        sleep 0.25
    done
}

exec 10> /dev/cpu_dma_latency
echo '10' >&10
echo '-1' > /proc/sys/kernel/sched_rt_runtime_us
echo 'never' > /sys/kernel/mm/transparent_hugepage/enabled
echo 'performance' | tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor > /dev/null
pkill synergys
../single-monitor
sudo -u "$runas" -i /bin/bash -c 'synergys --config "$DOTFILE_DIR/gaming/desktop-synergy.conf"'
configure_networking
systemctl start smbd
default_boot
wait_for_monitor
./cpupin.py --iothread-cpus 2 --smp-cpus 4,6,8,10 "$monitor_dev"
fg
../dual-monitor
pkill synergys
echo 'powersave' | tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor > /dev/null
exec 10>&-
