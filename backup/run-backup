#!/usr/bin/python

import argparse
import random
import socket
import subprocess
import sys
import time

import localutil

# Runs an rsnapshot backup, e-mailing the address specified by the --alert-email
# option if the backup fails.

class RunBackupApp(object):
    RC_RSNAPSHOT_ERROR = 1
    RC_RSNAPSHOT_WARNING = 2

    def __init__(self):
        self.configure_options()

    def configure_options(self):
        a = argparse.ArgumentParser(
            description='Run an rsnapshot backup'
        )
        a.add_argument('-a', '--alert-email', dest='alert_email',
            help='Email address to alert if backup fails'
        )
        a.add_argument('--rsnapshot-path', default='/usr/bin/rsnapshot',
            dest='rsnapshot_path',
            help='Path to the rsnapshot program'
        )
        a.add_argument('-c', '--rsnapshot-config', dest='rsnapshot_config',
            help='Path to the rsnapshot config file'
        )
        a.add_argument('-t', '--timeout', default=120,
            dest='timeout', type=int,
            help='Max time, in seconds, to allow backup to run'
        )
        a.add_argument('-w', '--max-wait', default=600, metavar='MAX',
            dest='max_wait', type=int,
            help='Wait a random number of seconds (up to MAX) before starting '
            'the backup.'
        )
        a.add_argument('interval',
            help='Backup interval to run (e.g. hourly, daily, weekly)'
        )
        self.argparser = a

    def parse_options(self, argv):
        args = self.argparser.parse_args(argv)
        return args

    def run(self, argv):
        args = self.parse_options(argv)
        alert_fmt_vars = {
            'config': args.rsnapshot_config,
            'interval': args.interval,
            'host': socket.gethostname().split('.')[0]
        }
        alert_subject = '{host}: rsnapshot {interval} run of {config} failed'\
            .format(**alert_fmt_vars)
        wait_time = random.randrange(0, args.max_wait)
        print("Waiting {} seconds before beginning backup".format(wait_time),
            file=sys.stderr)
        time.sleep(wait_time)
        try:
            subprocess.check_output([args.rsnapshot_path, '-c',
                args.rsnapshot_config, args.interval], stderr=subprocess.STDOUT,
                timeout=args.timeout)
        except subprocess.CalledProcessError as e:
            if e.returncode != self.RC_RSNAPSHOT_WARNING:
                localutil.send_email(args.alert_email, alert_subject,
                    e.output.decode('utf-8'))

if __name__ == '__main__':
    RunBackupApp().run(sys.argv[1:])
